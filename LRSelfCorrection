#!/bin/bash
set -e

#Prints a help message
function print_help {
	echo "Usage: $0 [options] --1 toCorrect.fasta --2 proof.fasta --out result.fasta"
	echo ""
	echo "	Input:"
	echo "	--1 toCorrect.fasta:           Fasta file of sequences to correct. Can either be long reads or contigs."
	echo "	--2 proof.fasta:               Fasta file of long reads to use for correction."
	echo "                                 If self-correcting a set of long reads, please provide the same file to --1 and --2."
	echo "	--out result.fasta:            Fasta file where to output the corrected sequences."
	echo ""
	echo "	Options:"
	echo "	--minSupport INT, -s INT:      Minimum support to consider a window for correction. (default: 4)"
	echo "	--maxSupport INT, -S INT:      Maximum support to consider a window for correction. (default: 4)"
	echo "	--windowSize INT, -l INT:      Size of the windows to process. (default: 500)"
	echo "	--merSize INT, -k INT:         k-mer size for chaining and polishing. (default: 9)"
	echo "  --solid INT, -f INT:           Minimum number of occurrences to consider a k-mer as solid during polishing. (default: 4)"
	echo "  --anchorSupport INT, -c INT:   Minimum number of sequences supporting (Ai) - (Ai+1) to keep the two anchors in the chaining. (default: 8)"
	echo "  --minAnchors INT, -a INT:      Minimum number of anchors in a window to compute consensus. (default: 10)"
	echo "	--windowOverlap INT, -m INT:   Overlap size between consecutive windows. (default: 50)"
	echo "	--nproc INT, -j INT:           Number of processes to run in parallel (default: number of cores)."
	echo "	--tmpdir STRING, -t STRING:    Path where to store the directory containing temporary files (default: working directory)."
	echo "	--help, -h:                    Print this help message."
	exit 1
}

#Set options to default values
reads=""
proof=""
nproc=$(nproc)
tmpdir="."
out=""
minSupport=4
maxSupport=100
windowSize=500
merSize=9
commonKMers=8
minAnchors=2
solid=4
windowOverlap=50

#Print help if no argument specified
if [[ "$1" == "" ]] ; then
	print_help
fi

#Otions handling
while [[ "$1" != "" ]] ; do
	case "$1" in
		"--help"|"-h")
			print_help ;;
		"--1")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) reads="$2" ; shift 2 ;;
			esac;;
		"--2")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) proof="$2" ; shift 2 ;;
			esac;;
		"--out")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) out="$2" ; shift 2 ;;
			esac ;;
		"--minSupport"|"-s")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) minSupport="$2" ; shift 2 ;;
			esac ;;
		"--maxSupport"|"-S")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) maxSupport="$2" ; shift 2 ;;
			esac ;;
		"--windowSize"|"-l")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) windowSize="$2" ; shift 2 ;;
			esac ;;
		"--merSize"|"-k")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) merSize="$2" ; shift 2 ;;
			esac ;;
		"--anchorSupport"|"-c")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) commonKMers="$2" ; shift 2 ;;
			esac ;;
		"--minAnchors"|"-a")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) minAnchors="$2" ; shift 2 ;;
			esac ;;
		"--solid"|"-f")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) solid="$2" ; shift 2 ;;
			esac ;;
		"--windowOverlap"|"-m")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) windowOverlap="$2" ; shift 2 ;;
			esac ;;
		"--nproc"|"-j")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) nproc="$2" ; shift 2 ;;
			esac ;;
		"--tmpdir"|"-t")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) tmpdir="$2" ; shift 2 ;;
			esac ;;
    	--)
			shift ; break ;;
    		*) echo "Error: invalid option \"$1\"" ; exit 1 ;;
  	esac
done

#Exit if no input or no output files have been specified
if [[ $reads == "" ]] ; then
	echo "Error: --1 must be specified";
	exit 1;
fi
if [[ $proof == "" ]] ; then
	echo "Error: --2 must be specified";
	exit 1;
fi
if [[ $out == "" ]] ; then
	echo "Error: --out must be specified";
	exit 1;
fi

#Remove the output file if it already exists
if [[ -f $out ]] ; then
	rm $out
fi

#Create the directory for temporary files
if [[ ! -d $tmpdir ]] ; then
	#tmpdir="$tmpdir/LRSC_"$$
    mkdir -p $tmpdir
fi

#Temporary files names
alignments="Alignments_"$$".paf"

#Get the path to LRSC's folder
LRSCs=$(readlink -f "$0")
LRSCf=$(dirname $LRSCs)

echo "["$(date)"] Self-aligning the long reads (minimap2)"
$LRSCf/minimap2/minimap2 --dual=yes -PD --no-long-join -w5 -t4 -g1000 -m30 -n1 "$proof" "$reads" > $tmpdir/"$alignments"

#echo "["$(date)"] Sorting the alignments file"

#echo "["$(date)"] Preparing the temporary files"
#$LRSCf/bin/prepareRawLongReads.py "$reads" $tmpdir/RawLongReads/
#$LRSCf/bin/explodeAlignmentFile.py $tmpdir/"$alignments" $tmpdir/ExplodedAlignments/
#ls $tmpdir/ExplodedAlignments > $tmpdir/ListAlignments


echo "["$(date)"] Correcting the long reads"
#$LRSCf/bin/parallelCorrection.sh $tmpdir "$minSupport" "$windowSize" "$merSize" "$commonKMers" "$solid" "$windowOverlap" "$nproc" "$out"
$LRSCf/bin/LRSelfCorrection -a $tmpdir/"$alignments" -d $tmpdir/RawLongReads/ -s "$minSupport" -l "$windowSize" -k "$merSize" -c "$commonKMers" -f "$solid" -m "$windowOverlap" -j "$nproc" -r "$reads" -R "$proof" >> "$out"
echo "["$(date)"] Removing the temporary files"
# rm -Rf $tmpdir
echo "["$(date)"] Exiting"
